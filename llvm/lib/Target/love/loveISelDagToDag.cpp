#include "MCTargetDesc/loveMCTargetDesc.h"
#include "love.h"
#include "loveTargetMachine.h"
#include "loveMatInt.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "love-isel"

namespace {

class loveDAGToDAGISel : public SelectionDAGISel {
  const loveSubtarget *Subtarget = nullptr;

public:
  loveDAGToDAGISel(loveTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<loveSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  bool SelectAddrFI(SDValue Addr, SDValue &Base);
  bool SelectBaseAddr(SDValue Addr, SDValue &Base);

  void Select(SDNode *N) override;

  StringRef getPassName() const override {
    return "love DAG->DAG Pattern Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "loveGenDAGISel.inc"
};

} // end anonymous namespace

/// This pass converts a legalized DAG into a love-specific DAG, ready for
/// instruction scheduling.
FunctionPass *llvm::createloveISelDag(loveTargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new loveDAGToDAGISel(TM, OptLevel);
}

bool loveDAGToDAGISel::SelectAddrFI(SDValue Addr, SDValue &Base) {
  if (auto *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
    return true;
  }
  return false;
}

bool loveDAGToDAGISel::SelectBaseAddr(SDValue Addr, SDValue &Base) {
  if (auto *FIN = dyn_cast<FrameIndexSDNode>(Addr))
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
  else
    Base = Addr;
  return true;
}

static SDNode *selectImm(SelectionDAG *CurDAG, const SDLoc &DL, const MVT VT,
                         int64_t Imm, const loveSubtarget &Subtarget) {
  MVT XLenVT = Subtarget.getXLenVT();
  loveMatInt::InstSeq Seq =
      loveMatInt::generateInstSeq(Imm, Subtarget.getFeatureBits());

  SDNode *Result = nullptr;
  SDValue SrcReg = CurDAG->getRegister(love::X0, XLenVT);
  for (loveMatInt::Inst &Inst : Seq) {
    SDValue SDImm = CurDAG->getTargetConstant(Inst.Imm, DL, XLenVT);
    if (Inst.Opc == love::LUI)
      Result = CurDAG->getMachineNode(love::LUI, DL, XLenVT, SDImm);
    else
      Result = CurDAG->getMachineNode(Inst.Opc, DL, XLenVT, SrcReg, SDImm);

    // Only the first instruction has X0 as its source.
    SrcReg = SDValue(Result, 0);
  }

  return Result;
}

void loveDAGToDAGISel::Select(SDNode *Node) {
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }
  unsigned Opcode = Node->getOpcode();
  SDLoc DL(Node);
  MVT XLenVT = Subtarget->getXLenVT();
  MVT VT = Node->getSimpleValueType(0);
  switch (Opcode) {
  case ISD::Constant: {
    auto *ConstNode = cast<ConstantSDNode>(Node);
    if (VT == XLenVT && ConstNode->isZero()) {
      SDValue New =
          CurDAG->getCopyFromReg(CurDAG->getEntryNode(), DL, love::X0, XLenVT);
      ReplaceNode(Node, New.getNode());
      return;
    }

    int64_t Imm = ConstNode->getSExtValue();
    ReplaceNode(Node, selectImm(CurDAG, DL, VT, Imm, *Subtarget));
    return;
  }
  case ISD::FrameIndex: {
    SDValue Imm = CurDAG->getTargetConstant(0, DL, MVT::i32);
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
    ReplaceNode(Node, CurDAG->getMachineNode(love::ADDI, DL, VT, TFI, Imm));
    return;
  }

  default: 
    dbgs() << "OPCODE: " << Opcode << '\n';
    Node->dump();
  }
  SelectCode(Node);
}
